{
    "Pandas with Pyplot": {
        "prefix": "pp",
        "body": [
            "# %%",
            "import numpy as np",
            "import pandas as pd",
            "import matplotlib.pyplot as plt",
            "%matplotlib inline",
            "# %%",
            "df = pd.read_csv(\"$1\")"
        ],
        "description": "Pandas with matplotlib",
        "scope": "python"
    },
    "Pandas with Sns": {
        "prefix": "ps",
        "body": [
            "# %%",
            "import numpy as np",
            "import pandas as pd",
            "import matplotlib.pyplot as plt",
            "import seaborn as sns",
            "%matplotlib inline",
            "# %%",
            "df = pd.read_csv(\"$1\")"
        ],
        "description": "Pandas with seaborn",
        "scope": "python"
    },
    "Create Pandas Dataframe": {
        "prefix": "pd",
        "body": [
            "# %%",
            "import numpy as np",
            "import pandas as pd",
            "# %%",
            "df = pd.read_csv(\"$1\")"
        ],
        "description": "Create Pandas Dataframe",
        "scope": "python"
    },
    "Create cell": {
        "prefix": "c",
        "body": [
            "# %%",
            "$1"
        ],
        "description": "Create code cell(# %%)",
        "scope": "python"
    },
    "Create Markdown Cell": {
        "prefix": "cc",
        "body": [
            "# %% [markdown]",
            "'''",
            "$1",
            "'''"
        ],
        "description": "Create markdown cell (# %% [markdown])",
        "scope": "python"
    },
    "Simple Linear Regression": {
        "prefix": "ml-r-slr",
        "body": [
            "# %%",
            "from sklearn.metrics import r2_score",
            "import pandas as pd",
            "import numpy as np",
            "import matplotlib.pyplot as pl",
            "from sklearn.model_selection import train_test_split",
            "from sklearn.linear_model import LinearRegression",
            "# %%",
            "dataset = pd.read_csv(\"$1\") # Other type of file could be used which contains tabular data",
            "# Target column must be last to work below all cell's code correctly, If you don't have your target colum last then make necessary changes to below two lines of code",
            "X = dataset.iloc[:, :-1]",
            "y = dataset.iloc[:, -1]",
            "# %%",
            "X_train, X_test, y_train, y_test = train_test_split(",
            "    X, y, test_size=0.2, random_state=997",
            ")",
            "# %%",
            "model = LinearRegression(",
            "    normalize=True, fit_intercept=True, n_jobs=-1).fit(X_train, y_train)",
            "# %%",
            "y_predicted = model.predict(X_test)",
            "# %%",
            "r2_score(y_predicted, y_test)"
        ],
        "description": "Simple Linear Regression Snippet",
        "scope": "python"
    },
    "Multiple Linear Regression": {
        "prefix": "ml-r-mlr",
        "body": [
            "# %%",
            "from sklearn.preprocessing import OneHotEncoder, StandardScaler",
            "from sklearn.metrics import r2_score",
            "from sklearn.linear_model import LinearRegression",
            "from sklearn.compose import ColumnTransformer",
            "import numpy as np",
            "import pandas as pd",
            "import matplotlib.pyplot as plt",
            "from sklearn.model_selection import train_test_split",
            "# %%",
            "dataset = pd.read_csv(\"$1\") # Other type of file could be used which contains tabular data",
            "# %%",
            "# Target column must be last to work below all cell's code correctly, If you don't have your target colum last then make necessary changes to below two lines of code",
            "X = dataset.iloc[:, :-1]",
            "y = dataset.iloc[:, -1]",
            "# %%",
            "state_encoder = OneHotEncoder()",
            "ct = ColumnTransformer([",
            "#    Do Required Transformation(s) here, you are not limited just with this can do what ever is required",
            "$2",
            "], remainder='passthrough')",
            "X = np.array(ct.fit_transform(X))",
            "# %%",
            "X_train, X_test, y_train, y_test = train_test_split(",
            "    X, y, test_size=0.2, random_state=997)",
            "# %%",
            "model = LinearRegression().fit(X_train, y_train)",
            "# %%",
            "y_pred = model.predict(X_test)",
            "# %%",
            "r2_score(y_pred, y_test)",
            "# Other matrices could be used here"
        ],
        "description": "Multiple Linear Regression Snippet",
        "scope": "python"
    },
    "Polynomial Regression": {
        "prefix": "ml-r-ply",
        "body": [
            "# %%",
            "from sklearn.metrics import r2_score",
            "from sklearn.preprocessing import PolynomialFeatures",
            "import numpy as np",
            "import pandas as pd",
            "from sklearn.model_selection import train_test_split",
            "# %%",
            "dataset = pd.read_csv('$1') # Other type of file could be used which contains tabular data",
            "# Target column must be last to work below all cell's code correctly, If you don't have your target colum last then make necessary changes to below two lines of code",
            "X = dataset.iloc[:, 1:-1].values",
            "y = dataset.iloc[:, -1].values",
            "# %%",
            "# Do required transformation(s) for X and/or y (If required)",
            "# %%",
            "poly_reg = PolynomialFeatures(degree=$2)",
            "X_poly = poly_reg.fit_transform(X)",
            "# %%",
            "r2_score(y, lin_reg_2.predict(X_poly))"
        ],
        "description": "Polynomial Regression snippet",
        "scope": "python"
    },
    "SVM Regressor with RBF kernel": {
        "prefix": "ml-r-svr",
        "body": [
            "# %%",
            "from sklearn.metrics import r2_score",
            "from sklearn.svm import SVR",
            "import pandas as pd",
            "# %%",
            "dataset = pd.read_csv('$1') # Other type of file could be used which contains tabular data",
            "# %%",
            "# Target column must be last to work below all cell's code correctly, If you don't have your target colum last then make necessary changes to below two lines of code",
            "X = dataset.iloc[:, 1:-1].values",
            "y = dataset.iloc[:, -1].values",
            "# %%",
            "# Do required transformation(s) for X and/or y (If required)",
            "# %%",
            "reg = SVR(kernel='rbf').fit(X, y)",
            "# %%",
            "y_pred = reg.predict(X)",
            "# %%",
            "r2_score(y, y_pred)"
        ],
        "description": "SVM Regressor with RBF kernel",
        "scope": "python"
    },
    "Decision Tree Regressor": {
        "prefix": "ml-r-dtr",
        "body": [
            "# %%",
            "from sklearn.metrics import r2_score",
            "from sklearn.tree import DecisionTreeRegressor",
            "import pandas as pd",
            "# %%",
            "dataset = pd.read_csv('$1') # Other type of file could be used which contains tabular data",
            "# %%",
            "# Target column must be last to work below all cell's code correctly, If you don't have your target colum last then make necessary changes to below two lines of code",
            "X = dataset.iloc[:, 1:-1].values",
            "y = dataset.iloc[:, -1].values",
            "# %%",
            "# Do required transformation(s) for X and/or y (If required)",
            "# %%",
            "regressor = DecisionTreeRegressor(random_state=997).fit(X, y)",
            "# %%",
            "y_pred = regressor.predict(X)",
            "# %%",
            "r2_score(y, y_pred)"
        ],
        "description": "Decision Tree Regressor Snippet",
        "scope": "python"
    },
    "Random Forest Regressor": {
        "prefix": "ml-r-rfr",
        "body": [
            "# %%",
            "from sklearn.metrics import r2_score",
            "from sklearn.ensemble import RandomForestRegressor",
            "import pandas as pd",
            "import matplotlib.pyplot as plt",
            "# %%",
            "dataset = pd.read_csv('$1') # Other type of file could be used which contains tabular data",
            "# %%",
            "# Target column must be last to work below all cell's code correctly, If you don't have your target colum last then make necessary changes to below two lines of code",
            "X = dataset.iloc[:, 1:-1].values",
            "y = dataset.iloc[:, -1].values",
            "# %%",
            "# Do required transformation(s) for X and/or y (If required)",
            "# %%",
            "regressor = RandomForestRegressor(n_estimators=10, random_state=0).fit(X, y)",
            "# %%",
            "y_pred = regressor.predict(X)",
            "# %%",
            "r2_score(y, y_pred)"
        ],
        "description": "Random Forest Regressor Snippet",
        "scope": "python"
    }
}